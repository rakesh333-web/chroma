EV-MST API Syntax Reference, ETS-800 : Utilities, ETS-800 : APU-32 Utilities
APU-32 Utilities
APU-32 utilities provide access to syntax for programming an APU-32/A instrument on ETS-800 test 
systems.
Note: All references to APU-32 in this section also apply to APU-32A except where noted.
Availability
• ETS-800 (Release 2013A)
Utility List
• apu32adcmode()
• apu32clamp()
• apu32compensation()
• apu32connectbanks()
• apu32connectbus()
• apu32filter()
• apu32kelvinmode()
• apu32matdelay()
• apu32mi()
• apu32miaccum()
• apu32mv()
• apu32mvaccum()
• apu32patternloader()
• apu32patternselect()
• apu32set()
• apu32setcapload()
• apu32setcaploadlive()
• apu32setlive()
• apu32stat()
Related Topics
• APU-32 Test Solutions
• APU-32 Theory of Operation
• Data Analysis and DSP Data Analysis Utilities
EV-MST API Syntax Reference, ETS-800 : Utilities, ETS-800 : APU-32 Utilities : apu32set()
apu32set()
This utility sets the mode, forcing value, voltage range, and current range for the specified pins. This 
utility also closes relays belonging to an APU-32 pin or group of pins. You must call this utility before 
calling other APU-32 utilities.
Availability
• ETS-800 (Release 2013A)
Declarations
int apu32set(), status;
const char *PinBusList
const double Value
const int Mode, Vrange, Irange, Connect, ConnectMode, Site
Format
status = apu32set(PinBusList, Mode, Value, Vrange, Irange, Connect, ConnectMode, Site);
Parameters
PinBusList The name of the pin, group of pins, or bus.
The name can be a string defined in the Pin Map Editor (PME), or a list of 
hardware bus names separated by commas. The format of the string when 
passing in hardware bus numbers takes the form "APU32BUS_A0, 
APU32BUS_B1, APU32BUS_A5-APU32BUS_A10". You can use a hyphen (-) 
to specify a range of hardware pins. Combinations of BUSA and BUSB 
hardware names are not allowed with the hyphen construct.
If you are not using the PME to map your pins, then the default value 
format is APU32_#, where # is the pin number defined in config.ets. No 
default value.
Mode The mode for the pins being programmed. See Usage. Valid values are:
•APU32_STANDBY
• APU32_OFF
• APU32_FV
• APU32_FI
• APU32_FV_PATTERN
• APU32_FI_PATTERN
No default value.
Value The value to force in volts for voltage modes and in milliamps for current 
modes. No default value.
Vrange The voltage range for the pins being programmed. Valid values are:
• APU32_80V
• APU32_30V
• APU32_10V
• APU32_3p6V
No default value.
Irange The current range for the pins being programmed. Valid values are:
• For the 3.6 V and 10 V ranges:
○ APU32_200MA
○ APU32_100MA
○ APU32_10MA
○ APU32_1MA
○ APU32_100UA
○ APU32_10UA
• For the 30 V range:
○ APU32_100MA
○ APU32_10MA
○ APU32_1MA
○ APU32_100UA
○ APU32_10UA
• For the 80 V range:
○ APU32_50MA
○ APU32_10MA
○ APU32_1MA
○ APU32_100UA
○ APU32_10UA
No default value.
Connect Optional. Defines how channels specified by PinBusList and (optionally) Site
are connected. Valid values:
• APU32_PIN_TO_VI = 0: Closes relays to VI and Pin. (Default)
• APU32_PIN_TO_BUSA = 1: Closes relays to BusA and Pin.
• APU32_PIN_TO_BUSB = 2: Closes relays to BusB and Pin.
• APU32_PIN_TO_VI_AND_BUSA = 3: Closes relays to VI, BusA, and Pin.
• APU32_PIN_TO_VI_AND_BUSB = 4: Closes relays to VI, BusB, and Pin.
• APU32_BUSA_TO_VI = 5: Closes relays to VI and BusA.
• APU32_BUSB_TO_VI = 6: Closes relays to VI and BusB.
• APU32_DISCONNECT = 7: Opens relays to VI, pin, and buses.
ConnectMode
(formerly 
KelvinMode)
Optional. Kelvin mode connections. Valid values are:
• 
APU32_KELVIN_OFF (0) (Default): Disconnects (opens) Kelvin output 
relays.
• 
APU32_KELVIN_PIN_150K_ON (1): Connects (closes) Kelvin output relays 
to measure a voltage drop across the 150 kΩ resistor for multiple pins.
• 
APU32_KELVIN_BANK_HI_ON (2): Connects (closes) Kelvin output relays 
for only one pin on the high side bank.
• 
APU32_KELVIN_BANK_LO_ON (3): Connects (closes) Kelvin output relays 
for only one pin on the low side bank.
• 
APU32_EXT_BUS_OFF (4): Disconnects (opens) the external bus FH/SH 
paths from the internal bus node. APU-32A only.
• 
APU32_EXT_BUS_ON (5): Connects (closes) the external bus FH/SH paths 
to the internal bus node. APU-32A only.
• 
APU32_EXT_BUS_OFF_FS_SHORT (6): Connects (closes) the FS switch and 
disconnects (opens) the external bus FH/SH paths from the internal bus 
node. APU-32A only.
• 
APU32_EXT_BUS_ON_FS_SHORT (7): Connects (closes) the FS switch and 
connects (closes) the external bus FH/SH paths to the internal bus node. 
APU-32A only.
• 
APU32_EXT_BUS_NOCHANGE (8): Uses the same connection mode as the 
previous set call. APU-32A only.
See Table 9 for more information.
Site Optional. The sites to program for multisite testing. Each option programs a 
single pin, multiple pins, or a pin group as defined in the PinList parameter. 
Valid values:
• 
0 to MS_MAX_SITES: Program the specified pins to a single site number. 
You cannot list more than one site using site numbers.
• 
MS_IGNORE_SITES (-3): Program all specified pins regardless of whether 
they are assigned to enabled sites, disabled sites, or the Pin Map Editor’s 
No Site column.
• 
MS_NO_SITE (-2): Program all specified pins assigned to the Pin Map 
Editor’s No Site column.
• 
MS_ALL (-1): Program all specified pins assigned to either enabled sites or 
the Pin Map Editor’s No Site column. This option does not program pins 
assigned to disabled sites. (Default).
Returns
This utility returns an integer that indicates the result of a call (status):
0 Operation successful.
Nonzero Failure.
See onerr() for a list of error codes.
Usage
Forcing voltage into a capacitive load can cause large overshoot and excessive ringing, resulting in long 
settling times. One such application is measuring small currents into a device pin having a bypass 
capacitor, typically in the range of 0.01 µF to 1 µF. Capacitive loads create delays (phase lags) inside a VI’s 
feedback path. Unfortunately, delays in a control loop cause instability in the form of overshoot and 
ringing. Typically, for a given capacitor, the smaller the current range, the more instability.
Phase-lead compensation can improve a VI’s performance by introducing a phase-lead to counteract the 
phase-lag caused by the capacitor. Enabling the compensation can greatly reduce overshoot and ringing. 
Settling times can be shortened from tens or hundreds of milliseconds to several milliseconds depending 
on the current measure requirements.
Note: Enable phase-lead compensation only when a capacitive load is present. Compensation without 
a capacitive load can cause oscillations. By default, phase-lead compensation should be off. For more 
information, see apu32compensation().
Note the following test conditions for Mode parameter values:
Table 8 Mode Parameter Test Conditions
Mode Value Test Conditions
APU32_STANDBY • The pin is put into the safe state of forcing 0 mA.
• Output relays remain closed and connected to the DUT pin.
When coming from standby mode in the 80 V range, you cannot 
directly program an APU-32 channel to one of the lower voltage 
ranges. Also, when coming from standby mode in the 3.6 V, 10 V, or 
30 V range, you cannot go up to the 80 V range.
APU32_OFF • The pin is turned off.
• All output and input relays are opened.
• Value, Vrange, Irange, and Connect parameters are unused.
APU32_FV • 16-bit force voltage mode.
• The Value parameter is in volts and is forced when this utility returns.
• Vrange and Irange parameters are valid.
• You can load AWG, but it does not run when scurun() is called.
APU32_FI • 16-bit force current mode.
• The Value parameter is in mA and is forced when this utility returns.
• Vrange and Irange parameters are valid.
• You can load AWG, but it does not run when scurun() is called.
APU32_FV_PATTERN • 16-bit force voltage mode.
• The Value parameter is in volts and is forced when this utility returns.
• Vrange and Irange parameters are valid.
• You can load AWG, and it runs when scurun() is called.
APU32_FI_PATTERN • 16-bit force current mode.
• The Value parameter is in mA and is forced when this utility returns.
• Vrange and Irange parameters are valid.
• You can load AWG, and it runs when scurun() is called.
Note the following test conditions for the ConnectMode parameter values (see APU-32 Kelvin Test 
Functionality for more information). For APU-32A use examples, see APEx Best Practices for ETS-800 "A" 
Instruments.
Table 9 ConnectMode Parameter Test Conditions
Mode Value Function, APU-32 Function, APU-32A
APU32_KELVIN_OFF Turns off Kelvin measurements (Default). Normal operating mode.
APU32_KELVIN_PIN_
150K_ON
• Enables the default Kelvin measurement mode.
• Allows multiple pins to be set up for Kelvin measurements.
• A call to apu32mv() with the Mode set to APU32_NORMAL returns the results of Kelvin measurements.
APU32_KELVIN_BANK_
HI_ON • 
Only one pin per endpoint can be set up when using APU32_KELVIN_HI_CONNECT or 
APU32_KELVIN_LO_CONNECT.
• A call to apu32mv() returns the results of a Kelvin measurement.
APU32_KELVIN_BANK_
LO_ON • 
Only one pin per endpoint can be set up when using APU32_KELVIN_HI_CONNECT or 
APU32_KELVIN_LO_CONNECT.
• A call to apu32mv() returns the results of a Kelvin measurement.
APU32_EXT_BUS_OFF Not supported. Disconnect (open) the external bus FH/SH paths from the internal 
bus node.
APU32_EXT_BUS_ON Not supported. Connect (close) the external bus FH/SH paths to the internal bus 
node.
APU32_EXT_BUS_OFF_
FS_SHORT
Not supported. Connect (close) the FS switch and disconnect (open) the external 
bus FH/SH paths from the internal bus node.
APU32_EXT_BUS_ON_
FS_SHORT
Not supported. Connect (close) the FS switch and connect (close) the external bus 
FH/SH paths to the internal bus node.
APU32_EXT_BUS_
NOCHANGE
Not supported. Do not alter existing connections.
You can set up only one pin per bank when using APU32_KELVIN_BANK_HI_ON or 
APU32_KELVIN_BANK_LO_ON. A call to apu32mv() with Mode equal to APU32_KELVIN returns the 
results of these connection modes. If you set a pin to a connection mode of APU32_KELVIN_PIN_150K, 
then the APU-32 does a APU_NORMAL measurement. Furthermore, if any one pin on a bank is using 
APU32_KELVIN_BANK_HI_ON or APU32_KELVIN_BANK_LO_ON, then all other pins on that bank must be 
off.
The following is a Kelvin Force and Measure code example:
// Now force +/-1 mA on the 30 V/1 mA range
apu32set(apu32PinNameString[chan], APU32_FI,
 apu32KelvinAlarmTest[iRangeCounter].iForceValue, APU32_30V, APU32_1MA,
 APU32_PIN_TO_VI, APU32_KELVIN_BANK_HI_ON);
lwait(1000);
actual = apu32mv(apu32PinNameString[chan], APU32_MV_1X, APU32_SAMPLES,
 APU32_SAMPLE_DELAY,APU32_NOT_SHARED, APU32_KELVIN);
groupgetresults(groupResults, resultsCntForOnePin);
Examples
Single Instrument
ETS_PRGFLOW_FUNC APU32Example(int DSIndex, LPCTSTR TestLabel)
{
 double v;
 double i;
 apu32set("MyPin", APU32_FV, 2, APU32_10V, APU32_10MA, APU32_PIN_TO_VI);
 // Transition from 2 V to 5 V exponentially in 10 ms on pin "MyPin"
 apu32setcapload("MyPin", APU32_FV, 5, APU32_10V, APU32_10MA, 10);
 // Kelvin mode
 apu32set("MyPin", APU32_FI, 0.025, APU32_10V, APU32_100UA, APU32_PIN_TO_VI,
 APU32_KELVIN_PIN_150K_ON);
 // Expect i = 25 uA and v = 3.75 V
 v = apu32mv("MyPin", APU32_MV_1X, 128, 20);
 i = apu32mi("MyPin", APU32_MI_1X, 128, 20);
 i *= 1000;
 if(v <3.7 || v > 3.8)
 {
 // fail
 }
 if(i < 24 || i > 26)
 {
 // fail
 }
 // ...
 apu32set("MyPin", APU32_FI, 0.025, APU32_10V, APU32_100UA, APU32_PIN_TO_VI,
 APU32_KELVIN_BANK_LO_ON);
 // Expect v = 0.1 to 0.3 V due to probe impedance
 v = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_NOT_SHARED, APU32_KELVIN);
 if(v < 0.1 || v > 0.3)
 {
 // fail
 }
 // Expect v = 0.7 to 0.9 V due to probe impedance
 v = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_NOT_SHARED, APU32_KELVIN);
 if(v < 0.7 || v > 0.9)
 {
 // fail
 }
 return TRUE;
}
Grouped Instruments
ETS_PRGFLOW_FUNC APU32Example(int DSIndex, LPCTSTR TestLabel)
{
 apu32set("MyPins", APU32_FV, 2, APU32_10V, APU32_10MA, APU32_PIN_TO_VI);
 // Transition from 2 V to 5 V exponentially in 10 ms on grouped pins "MyPins"
 apu32setcapload("MyPins", APU32_FV, 5, APU32_10V, APU32_10MA, 10);
 return TRUE;
}
Related Topics
• APU-32 Utilities
• APU-32 Test Solutions
DC Instruments, ETS-800 : APU-32 (Analog Pin Unit 32) : APU-32 Test Solutions : Selectable Fixed Current 
Clamps
Selectable Fixed Current Clamps
An APU-32 has selectable current clamps available in one of three levels: No Clamp, MID, and LOW. 
Asymmetrical clamping is possible using independent Positive and Negative clamp settings. The current 
clamp uses a fast acting, semiprecision circuit. This topology, local to the output stage, results in clamp 
levels that respond quickly but are somewhat dependent on the current range. The following table lists 
APU-32 typical current clamping.
Table 1 APU-32 Current Clamping
Current
Range
Voltage Range Current Clamp Levels (% of Full Scale)
No Clamp/MID/LOW
10 µA 3.6 V, 10 V, 30 V, 80 V 150% [15 µA]/ 75% [7.5 µA]/ 35% [3.5 µA]
100 µA 3.6 V, 10 V, 30 V, 80 V 150% [150 µA]/ 75% [75 µA]/ 35% [35 µA]
1 mA 3.6 V, 10 V, 30 V, 80 V 150% [1.5 mA]/ 75% [750 µA]/ 35% [350 µA
10 mA 3.6 V, 10 V, 30 V, 80 V 150% [15 mA]/ 75% [7.5 mA]/ 35% [3.5 mA]
50 mA 80 V 130% [65 mA]/ 60% [30 mA]/ N/A
100 mA 3.6 V, 10 V, 30 V 130% [130 mA]/ 60% [60 mA]/ 20% [20 mA]
200 mA 3.6 V, 10 V 130% [260 mA]/ 60% [120 mA]/ 20% [40 mA]
Note: Only No Clamp and MID Clamps are available on the 50 mA range.
Kelvin Test
A parametric Kelvin measurement to a socket isolates unintended path resistance between Force and 
Sense connections. If the resistance is too high, the current needed to achieve a given voltage could 
exceed the socket and device rating and result in damage. To implement a contact resistance 
measurement on both the High and Low sides of an instrument, see the following pseudocode example.
// High Side
SET (Pins, Force Current, 0.0mA, Current Range, Voltage Range, Kelvin High);
MV0 = MV( Pins, Kelvin Measure, Number of Samples, Time Between Samples);
SET (Pins, Force Current, Forcing Value in mA, Current Range, Voltage Range,
 Kelvin High);
MV1 = MV(Pins, Kelvin Measure, Number of Samples, Time Between Samples);
Contact Resistance High Side = (MV1 – MV0) / (Forcing Value in mA – 0.0 mA);
// Low Side
Set ( Pins, Force Current, 0.0mA, Current Range, Voltage Range, Kelvin Low);
MV0 = MV( Pins, Kelvin Measure, Number of Samples, Time Between Samples);
Set (Pins, Force Current, Forcing Value in mA, Current Range, Voltage Range,
 Kelvin Low);
MV1 = MV(Pins, Kelvin Measure, Number of Samples, Time Between Samples);
Contact Resistance Low Side= (MV1 – MV0) / (Forcing Value in mA – 0.0 mA);
Kelvin Connections Example
The following example of a continuity test using a high side sense switch shows how the APU-32 Kelvin 
mode works. The figure below shows the basic Kelvin test setup.
Figure 11 APU-32 Basic Kelvin Test Setup
To execute a continuity test, use this setup:
• Force a small current into the diode load using the 10 V and 1 mA ranges.
• Close the Kelvin switch.
Case 1
In the case shown in the basic setup figure above, all connections to the load are made correctly and 
current flows through the diode. Note the following assumptions:
• Single fault detection only
• Low side connections have been made.
• VI is working correctly.
• Kelvin switch is working.
In this case you get the following current and voltage measurements:
• MI = -0.2 mA
• MV = -0.7 V
Case 2
In the case where no connection to the load is established, you get the following current and voltage 
measurements:
• MI = -80 µA
• MV = -10 V
Figure 12 APU-32 Kelvin Connection Setup with No Connection to Load
Case 3
In the case where ForceHi is open, you get the following current and voltage measurements:
• MI = 0 A
• MV = 0 V
Figure 13 APU-32 Kelvin Connection Setup with Force High Open
Case 4
In the case where SenseHi is open, you get the following current and voltage measurements:
• MI = -0.2 mA
• MV = 0 V
Figure 14 APU-32 Kelvin Connection Setup with Sense High Open
APU-32 Features
• 32 Force/Sense channels per board
○ Quad bank architecture
○ Eight ForceHi/SenseHi connections per bank
○ One isolated ForceLo/SenseLo connection per bank
• Four Force/Measure Voltage Ranges: 80 V, ±30 V, ±10 V, ±3.6 V
• Seven Force Current Ranges: ±200 mA, ±100 mA, ±50 mA, ±10 mA, ±1 mA, ±100 μA, ±10 μA
• Eight Measure Current Ranges: ±200 mA, ±100 mA, ±50 mA, ±10 mA, ±1 mA, ±100 μA, ±10 μA, ±1 µA
• Cap Load Compensation. User Enabled Phase Lead-Compensation
• 200 ksps AWG per channel
○ 16-bit resolution
○ 256k Sample Memory
• 200 ksps Digitizer per channel
○ 16-bit resolution
○ 32k Sample Memory
○ Real-Time Measurement Accumulator, Instant Results Avg.
○ AWG Editor supports up to 128 regions per channel
○ Accumulator supports 32 sample sets per pattern
• Selectable current clamps. Limit current: 30%, 70%, or 145% of range
• Programmable voltage clamps. Limit voltage: 20% to 120% of range
• 2 x 8 matrix available per bank
○ 2 x 16 matrix available in Combined Mode
○ Maximum voltage/current: 200 V/1 A (4 A pulsed)
• Fully floating
• High Side/Low Side Kelvin Detect. Software Measurement/Test Limit Comparison functions
• Measurement window alarms
○ VClamp and IClamp
○ Kelvin
○ Measure overrange
• Measure Rkelvin, <1 Ω capability
APU-32 (Analog Pin Unit 32)
Availability
• ETS-800
The Analog Pin Unit 32 (APU-32) is a single slot, 32 channel, 80 V, four quadrant V/I with eight current 
ranges (from 200 mA to 1 µA) and per-pin AWG and digitizing capabilities. The instrument is organized in 
four banks of eight channels. Each bank contains its own independent low side connection, providing 
true single-board multisite capability and allowing coherent synchronization of analog and digital events. 
In addition, channels in the same bank can be ganged in parallel to force up to 1.0 A in Force Current 
mode.
The APU-32 V/I is stable with almost any combination of inductive and capacitive loads. Bandwidth and 
settling time are optimized to maximize measurement speed. Analog switches are used extensively for 
high reliability and fast switching speeds.
An APU-32 provides flexibility in continuity and other parallel and multisite DC testing. Measurements 
are made using a 5 µs, 16-bit, shared per-pin AWG and digitizer. You can also use an APU-32 in situations 
where an audio-based signal must be synthesized or digitized.
APU-32 instrument primary documentation includes the following topics:
• APU-32 Features
• APU-32 Safety Information
• APU-32 Theory of Operation
• APU-32 Compatibility
• APU-32 Block Diagrams
• APU-32 Configuration Syntax
• APU-32 User Interface
For information on EV-MST syntax used to program an APU-32, see:
• APU-32 Test Solutions
• APU-32 Utilities
For additional information on the APU-32 instrument, see:
• APU-32 Applications
• APU-32 Best Practices
• APU-32 Calibration in DOCP1187 – ETS-800 Service and Maintenance Guide (available on eKnowledge)
• APU-32 Diagnostics in DOCP1187 – ETS-800 Service and Maintenance Guide (available on eKnowledge)
• APU-32 DIB Design Guidelines
• APU-32 Help View
• APU-32 Specifications
• APU-32 Terminology - See Glossary of Terms
Related Topics
• Instruments, ETS-800
• APU-32A (Analog Pin Unit 32A)
apu32mi()
This utility measures a current on the specified APU-32 pins and returns the current reading in milliamps.
Availability
• ETS-800 (Release 2013A)
Declarations
double apu32mi(), status;
const char *PinName
const double SampleDelay
const int IGain, NumSamples, Site
Format
status = apu32mi(PinName, IGain, NumSamples, SampleDelay, Site);
Parameters
PinName The name of the pin or group of pins to be programmed. The name is a 
string defined in the Pin Map Editor (PME). If you are not using the PME to 
map your pins, then the default value format is APU32_#, where # is the pin 
number defined in config.ets. No default value.
IGain The current measure gain. Valid values:
• APU32_MI_1X = 3
• APU32_MI_10X = 4
• 
APU32_SHARED_MEASURE = 5: The value is a shared measurement since 
two adjacent pins share an ADC, which is used to make both a voltage and 
a current measurement.
NumSamples The number of samples to average. Valid range is 1 to 32768.
SampleDelay The time in microseconds to delay between each sample. Valid range is 5 to 
10000.
Site Optional. The sites to program for multisite testing. Each option programs a 
single pin, multiple pins, or a pin group as defined in the PinList parameter. 
Valid values:
• 
0 to MS_MAX_SITES: Program the specified pins to a single site number. 
You cannot list more than one site using site numbers.
• 
MS_IGNORE_SITES (-3): Program all specified pins regardless of whether 
they are assigned to enabled sites, disabled sites, or the Pin Map Editor’s 
No Site column.
• 
MS_NO_SITE (-2): Program all specified pins assigned to the Pin Map 
Editor’s No Site column.
• 
MS_ALL (-1): Program all specified pins assigned to either enabled sites or 
the Pin Map Editor’s No Site column. This option does not program pins 
assigned to disabled sites. (Default).
Returns
This utility returns the average measured value in mA (status). When a failure occurs, this utility returns 
FLT_MAX.
For group measurements, this utility returns the value from the first APU-32 pin in a group. Use the 
groupgetresults() utility to get results from a group measurement.
See onerr() for a list of error codes.
Usage
This utility returns the average of the current measurement readings, as defined by the NumSamples
parameter, which sets the number of times you want to trigger the ADC, and the SampleDelay
parameter, which specifies the time interval in microseconds at which to take the samples.
If the PinName parameter is a group number, then this utility makes measurements on all APU-32 pins in 
the group.
An APU-32 does not require interleaving for DC measurements. Each pin has its own ADC, so each pin 
can be clocked individually.
The APU-32 pin must be in a forcing mode. Otherwise, EV-MST returns an error.
For information on how to preconnect the ADC multiplexer to reduce settling time that can affect 
measurement data after a static MV or MI, see apu32adcmode(). See also the Preconnect Example
below. Note that in this example, EV-MST sets the filter to either the default setting or the setting 
programmed in the last call to apu32filter().
Examples
Single Instrument
// Test Function: APU32MeasureTest
ETS_PRGFLOW_FUNC APU32MeasureTest(int DSIndex, LPCTSTR TestLabel)
{
 double mv_value;
 double mi_value;
 // Example #1: Simple APU-32 measurement
 mi_value = apu32mi("MyPin", APU32_MI_1X, 128, 20);
 // Example #2: Sharing the ADC with adjacent pin to make a voltage
 // and a current measurement.
 mv_value = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_MI_1X);
 mi_value = apu32mi("MyPin", APU32_SHARED_MEASURE, 128, 20);
 return(msSiteStat(MS_ALL)); // Return with status
}
Grouped Instruments
// Test Function: APU32MeasureTest
// Grouping of instruments is set up in the Pin Map Editor (PME)
ETS_PRGFLOW_FUNC APU32MeasureTest(int DSIndex, LPCTSTR TestLabel)
{
 double mv_value;
 double mi_value;
 RESULTS_STR mv_results[NUM_SITES];
 RESULTS_STR mi_results[NUM_SITES];
 // Example #1: Simple APU-32 measurement
 mi_value = apu32mi("MyGroupOfPins", APU32_MI_1X, 128, 20);
 groupgetresults(mi_results, NUM_SITES);
 // Example #2: Sharing the ADC with adjacent pin to make a voltage
 // and a current measurement.
 groupgetresults(mv_results, NUM_SITES);
 mv_value = apu32mv("MyGroupOfPins", APU32_MV_1X, 128, 20, APU32_MI_1X);
 groupgetresults(mv_results, NUM_SITES);
 mi_value = apu32mi("MyGroupOfPins", APU32_SHARED_MEASURE, 128, 20);
 groupgetresults(mi_results, NUM_SITES);
 return(msSiteStat(MS_ALL)); // Return with status
}
Preconnect Example
// Test Function: Test1
ETS_PRGFLOW_FUNC APU32Example(int DSIndex, LPCTSTR TestLabel)
{
 // Preconnect the pin's ADC to measure current with 10X gain
 // and the default filter.
 apu32adcmode("MyPins", APU32_PRECONNECT_MI_10X, 1);
 apu32set("MyPins", APU32_FV, 0, APU32_10V, APU32_10MA);
 apu32mi("MyPins", APU32_MI_10X, 100, 13);
 // Preconnect the pin's ADC to measure voltage with 1X gain and the adjacent
 // pin's shared ADC to measure current with 1X gain
 apu32adcmode("MyPins", APU32_PRECONNECT_MV_10X, 1, APU32_PRECONNECT_MI_1X);
 apu32set("MyPins", APU32_FV, 0, APU32_10V, APU32_10MA);
 apu32mv("MyPins", APU32_MV_1X, 100, 13, APU32_MI_1X);
 apu32mi("MyPins", APU32_SHARED_MEASURE, 100, 13);
 // ...
 return TRUE;
}
apu32mv()
This utility measures voltage on the specified APU-32 pins and returns the voltage reading in volts.
Availability
• ETS-800 (Release 2013A)
Declarations
double apu32mv(), value;
const char *PinName
const double SampleDelay
const int IGainShared, Mode, NumSamples, Site, VGain
Format
value = apu32mv(PinName, VGain, NumSamples, SampleDelay, IGainShared, Mode, Site);
Parameters
PinName The name of the pin or group of pins to be programmed. The name is a 
string defined in the Pin Map Editor (PME). If you are not using the PME to 
map your pins, then the default value format is APU32_#, where # is the pin 
number defined in config.ets. No default value.
VGain The voltage measure gain. Valid values:
• APU32_MV_1X (Default)
• APU32_MV_10X
NumSamples The number of samples to average. Valid range is 1 to 32768. Default value is 
1.
SampleDelay The time in µs to delay between each sample. Valid range is 5 to 10000. 
Default value is 10.
IGainShared The shared current measurement gain for ADC borrowing (that is, 
simultaneous measurement). Valid values:
• APU32_NOT_SHARED (Default)
• APU32_MI_1X
• APU32_MI_10X
Mode The measurement mode. Valid values:
• APU32_NORMAL (Default)
• APU32_KELVIN: See Usage below.
Site Optional. The sites to program for multisite testing. Each option programs a 
single pin, multiple pins, or a pin group as defined in the PinList parameter. 
Valid values:
• 
0 to MS_MAX_SITES: Program the specified pins to a single site number. 
You cannot list more than one site using site numbers.
• 
MS_IGNORE_SITES (-3): Program all specified pins regardless of whether 
they are assigned to enabled sites, disabled sites, or the Pin Map Editor’s 
No Site column.
• 
MS_NO_SITE (-2): Program all specified pins assigned to the Pin Map 
Editor’s No Site column.
• 
MS_ALL (-1): Program all specified pins assigned to either enabled sites or 
the Pin Map Editor’s No Site column. This option does not program pins 
assigned to disabled sites. (Default).
Returns
This utility returns the average measured value in volts (value). When a failure occurs, this utility returns 
FLT_MAX.
For group measurements, this utility returns the value from the first APU-32 pin in a group. Use the 
groupgetresults() utility to get results from a group measurement.
See onerr() for a list of error codes.
Usage
This utility returns the average of the voltage measurement readings, as defined by the NumSamples
parameter, which sets the number of times you want to trigger the ADC, and the SampleDelay
parameter, which specifies the time interval in microseconds at which to take the samples.
If the PinName parameter is a group number, then this utility makes measurements on all APU-32 pins in 
the group.
An APU-32 does not require interleaving for DC measurements. Each pin has its own ADC, so each pin 
can be clocked individually.
The APU-32 pin must be in a forcing mode. Otherwise, EV-MST returns an error.
For information on how to preconnect the ADC multiplexer to reduce settling time that can affect 
measurement data after a static MV or MI, see apu32adcmode(). See also the Preconnect Example
below. Note that in this example, EV-MST sets the filter to either the default setting or the setting 
programmed in the last call to apu32filter().
The Mode parameter sets the measurement mode: normal or Kelvin. When using APU32_KELVIN mode, 
specify the setup using the apu32set() utility’s KelvinMode parameter. For example, if you set 
KelvinMode to APU32_KELVIN_BANK_HI_ON, then you must set Mode to APU32_KELVIN to return Kelvin 
measurements. With this setup, this utility can measure the voltage drop across a 150 kΩ resistor for 
both high and low Kelvin. This type of Kelvin measurement allows you to determine that the force/sense 
connection is actually being made. A Kelvin test done in this fashion does not measure the actual 
force/sense contact resistance. For more information, see apu32set().
Examples
Single Instrument
// Test Function: APU32MeasureTest
ETS_PRGFLOW_FUNC APU32MeasureTest(int DSIndex, LPCTSTR TestLabel)
{
 double mv_value;
 double mi_value;
 double v;
 double i;
 apu32set("MyPin", APU32_FI, 0.025, APU32_10V, APU32_100UA, APU32_PIN_TO_VI,
 APU32_KELVIN_OFF, MS_ALL);
 // Example #1: Simple APU-32 measurement
 mv_value = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_NORMAL);
 // Example #2: Sharing the ADC with adjacent pin to make a voltage
 // and a current measurement.
 mv_value = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_MI_1X, APU32_NORMAL);
 mi_value = apu32mi("MyPin", APU32_SHARED_MEASURE, 128, 20);
 apu32set("MyPin", APU32_FI, 0.025, APU32_10V, APU32_100UA, APU32_PIN_TO_VI,
 APU32_KELVIN_PIN_150K_ON);
 // Expect i = 25 uA and v = 3.75 V
 v = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_NORMAL);
 i = apu32mi("MyPin", APU32_MI_1X, 128, 20);
 i *= 1000;
 if(v < 3.7 || v > 3.8)
 {
 //fail
 }
 if(i < 24 || i > 26)
 {
 //fail
 }
 // ...
 apu32set("MyPin", APU32_FI, 0.025, APU32_10V, APU32_100UA, APU32_PIN_TO_VI,
 APU32_KELVIN_BANK_LO_ON);
 // Expect v = 0.1 to 0.3 V due to probe impedance
 v = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_NOT_SHARED, APU32_KELVIN);
 if(v < 0.1 || v > 0.3)
 {
 // fail
 }
 apu32set("MyPin", APU32_FI, 0.025, APU32_10V, APU32_100UA, APU32_PIN_TO_VI,
 APU32_KELVIN_BANK_HI_ON);
 // Expect v = 0.7 to 0.9 V due to probe impedance
 v = apu32mv("MyPin", APU32_MV_1X, 128, 20, APU32_NOT_SHARED, APU32_KELVIN);
 if(v < 0.7 || v > 0.9)
 {
 // fail
 }
 return(msSiteStat(MS_ALL)); // Return with status
}
Grouped Instruments
// Test Function: APU32MeasureTest
// Grouping of instruments are setup in the Pin Map Editor (PME)
ETS_PRGFLOW_FUNC APU32MeasureTest(int DSIndex, LPCTSTR TestLabel)
{
 double mv_value;
 double mi_value;
 RESULTS_STR mv_results[NUM_SITES];
 RESULTS_STR mi_results[NUM_SITES];
 apu32set("MyGroupOfPins", APU32_FI, 0.025, APU32_10V, APU32_100UA,
 APU32_PIN_TO_VI, APU32_KELVIN_PIN_150K_ON);
 // Example #1:Simple APU-32 measurement
 mv_value = apu32mv("MyGroupOfPins", APU32_MV_1X, 128, 20);
 groupgetresults(mv_results, NUM_SITES);
 // Example #2: Sharing the ADC with adjacent pin to make a voltage
 // and a current measurement.
 groupgetresults(mv_results, NUM_SITES);
 mv_value = apu32mv("MyGroupOfPins", APU32_MV_1X, 128, 20, APU32_MI_1X);
 groupgetresults(mv_results, NUM_SITES);
 mi_value = apu32mi("MyGroupOfPins", APU32_SHARED_MEASURE, 128, 20);
 groupgetresults(mi_results, NUM_SITES);
 return(msSiteStat(MS_ALL)); // Return with status
}
Preconnect Example
// Test Function: Test1
ETS_PRGFLOW_FUNC APU32Example(int DSIndex, LPCTSTR TestLabel)
{
 // Preconnect the pin's ADC to measure current with 10X gain
 // and the default filter
 apu32adcmode("MyPins", APU32_PRECONNECT_MI_10X, 1);
 apu32set("MyPins", APU32_FV, 0, APU32_10V, APU32_10MA);
 apu32mi("MyPins", APU32_MI_10X, 100, 13);
 // Preconnect the pin's ADC to measure voltage with 1X gain and
 // the adjacent pin's shared ADC to measure current with 1X gain.
 apu32adcmode("MyPins", APU32_PRECONNECT_MV_10X, 1, APU32_PRECONNECT_MI_1X);
 apu32set("MyPins", APU32_FV, 0, APU32_10V, APU32_10MA);
 apu32mv("MyPins", APU32_MV_1X, 100, 13, APU32_MI_1X);
 apu32mi("MyPins", APU32_SHARED_MEASURE, 100, 13);
 // ...
 return TRUE;
}
Creating an ETS-800 Test Program
Availability
• ETS-800
Eagle Test provides an integrated development environment to help you create new test projects. Each 
project includes a number of files that perform various functions in a test program. When you create 
new projects, the Eagle Test eShell provides the necessary skeleton files.
Eagle Test suggests the following procedure for effective new project development:
1. Create a new test project.
2. Create a test function and Product Data Sheet (PDS) (using the ETS Wizards).
3. Edit the Product Datasheet (using the Datasheet Editor).
4. Generate a final executable test program.
5. Debug the test program.
6. Run the completed test program.
7. 
Set global test switches, user switches, and datalogging options for operator (production environment) 
usage.
8. Save these settings in the operator configuration file (.oper file).
9. Build the project for release.
The following topics are available:
